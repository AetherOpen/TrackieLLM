# cbindgen.toml - Configuration for C header generation

# Language of the generated header.
language = "C"

# Header comment style.
style = "C"

# A preamble (comment block) to add to the top of the generated file.
# This is where we put the file description, copyright, etc.
header = """
/**
 * @file via_config.h
 * @author TrackieLLM Rust Team (via cbindgen)
 * @brief C-ABI for the TrackieLLM Configuration Loader Module.
 *
 * @copyright Copyright (c) 2024
 *
 * This header defines the Foreign Function Interface (FFI) for the Rust-based
 * configuration parser. It provides a safe, C-compatible API for the main C++
 * application to load, access, and release configuration data.
 *
 * The core principle is an "opaque pointer" pattern. The C++ application
 * receives a handle (ViaConfig*) to the configuration data but has no knowledge
 * of its internal layout. All operations, including memory deallocation, are
 * managed by the Rust library through the functions defined here.
 *
 * USAGE LIFECYCLE:
 * 1. Call `via_config_load()` with paths to YAML files to get a `ViaConfig*` handle.
 * 2. Check if the returned handle is not NULL.
 * 3. Use the various `via_config_get_*()` functions to retrieve values.
 * 4. When done, call `via_config_free()` with the handle to prevent memory leaks.
 */
"""

# Guard for the header file to prevent multiple inclusions.
include_guard = "VIA_CONFIG_H"

# Add the `extern "C"` block for C++ compatibility.
# This is crucial for linking with the C++ code.
[export.cpp_compat]
value = true

# Specify where to save the generated file.
# The path is relative to the crate's root directory.
[parse]
parse_deps = true
include = ["via"] # Specify which modules/crates to look into if needed

# This is the most important part: where to save the file.
[output]
path = "include/via_config.h"
