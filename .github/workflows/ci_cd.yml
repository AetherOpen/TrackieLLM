# ==============================================================================
# GitHub Actions CI/CD Pipeline para TrackieLLM
# ==============================================================================
#
# Este workflow automatiza os processos de build, teste e release para o projeto
# TrackieLLM. Ele é acionado em:
#   - Pushes para o branch `main` (para integração contínua).
#   - Pull requests visando o branch `main` (para validação).
#   - Pushes de tags começando com `v` (para criar releases).
#
name: TrackieLLM CI/CD

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ============================================================================
  # Job 1: Build e Teste no Linux (x86_64 nativo e compilação cruzada para ARM)
  # ============================================================================
  build-linux:
    name: Build & Test (Linux x86_64 + ARM Cross-Compile)
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Faz o checkout do código do repositório, incluindo submódulos
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive' # Essencial para clonar dependências como llama.cpp

      # Passo 2: Instala todas as dependências do sistema de uma só vez
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            git \
            python3 \
            python3-pip \
            pkg-config \
            libasound2-dev \
            libv4l-dev \
            # Ferramentas para compilação cruzada para ARM64
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu

      # Passo 3: Instala as dependências Python dos scripts
      - name: Install Python script dependencies
        run: python3 -m pip install -r scripts/training/requirements.txt

      # Passo 4: Baixa os modelos de IA necessários para a aplicação
      - name: Download AI Models
        run: python3 scripts/setup/download_models.py

      # --- Build Nativo (x86_64) ---
      - name: Configure CMake (Native x86_64)
        run: cmake -S . -B build/x86_64 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON

      - name: Build (Native x86_64)
        run: cmake --build build/x86_64 --parallel

      - name: Test (Native x86_64)
        run: |
          cd build/x86_64
          ctest --output-on-failure

      # --- Compilação Cruzada (ARM64) ---
      - name: Configure CMake (ARM64 Cross-Compile)
        run: >
          cmake -S . -B build/aarch64
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc
          -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++

      - name: Build (ARM64 Cross-Compile)
        run: cmake --build build/aarch64 --parallel

      # Passo 5: Empacota a versão para TrackieOS (ARM64)
      - name: Package for TrackieOS (ARM64)
        run: |
          # Executa o script de empacotamento, passando o nome da tag/branch e o diretório do build
          # NOTA: O script 'package_os.sh' deve ser ajustado para aceitar o diretório de build como segundo argumento.
          ./scripts/deployment/package_os.sh ${{ github.ref_name }} build/aarch64

      # Passo 6: Faz o upload do artefato do TrackieOS para ser usado no job de release
      - name: Upload TrackieOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trackiellm-os-aarch64
          path: trackiellm-os-*.tar.gz
          retention-days: 5 # Mantém o artefato por 5 dias

  # ============================================================================
  # Job 2: Build e Teste no Windows (x64)
  # ============================================================================
  build-windows:
    name: Build & Test (Windows x64)
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # O vcpkg é um gerenciador de pacotes C++ da Microsoft que simplifica a aquisição de bibliotecas.
      # Ele lerá o arquivo 'vcpkg.json' na raiz do seu projeto para instalar as dependências.
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          runVcpkgInstall: true

      - name: Install Python script dependencies
        run: python -m pip install -r scripts/training/requirements.txt

      - name: Download AI Models
        run: python scripts/setup/download_models.py

      # Configura o CMake para usar o toolchain do vcpkg, que localiza as dependências automaticamente.
      - name: Configure CMake
        run: >
          cmake -S . -B build
          -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
          -DBUILD_TESTING=ON

      - name: Build
        run: cmake --build build --config Release --parallel

      - name: Test
        run: |
          cd build
          ctest --output-on-failure -C Release

      # Empacota a versão para Windows (TrackieStudio)
      - name: Package for TrackieStudio
        shell: cmd
        run: scripts\deployment\package_studio.bat ${{ github.ref_name }}

      # Faz o upload do artefato do TrackieStudio
      - name: Upload TrackieStudio Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trackiellm-studio-windows-x64
          path: trackiellm-studio-*.zip
          retention-days: 5

  # ============================================================================
  # Job 3: Cria a Release no GitHub (executado apenas ao criar uma nova tag)
  # ============================================================================
  create-release:
    name: Create GitHub Release
    # Condição: só executa se o evento for um push de uma tag no formato 'v*.*.*'
    if: startsWith(github.ref, 'refs/tags/v')
    # Dependência: precisa que os jobs de build do Linux e Windows terminem com sucesso
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Baixa todos os artefatos de build dos jobs anteriores
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/ # Baixa todos para uma pasta 'artifacts'

      # Passo 2: Cria a release e anexa os artefatos empacotados
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # Gera as notas de release automaticamente com base nos commits desde a última tag
          generate_release_notes: true
          # Anexa os arquivos dos pacotes gerados
          files: |
            artifacts/trackiellm-os-aarch64/*.tar.gz
            artifacts/trackiellm-studio-windows-x64/*.zip
